# Reference
# https://github.com/slsa-framework/slsa-github-generator/blob/main/internal/builders/go/README.md

name: SLSA Go Releaser

on:
  workflow_dispatch:
  push:
    tags:
      - 'v[0-9].[0-9]+.[0-9]+-alpha.[0-9]+'
      - 'v[0-9].[0-9]+.[0-9]+-beta.[0-9]+'
      - 'v[0-9].[0-9]+.[0-9]+-rc.[0-9]+'
      - 'v[0-9].[0-9]+.[0-9]+'
    # branches:
    #   - 'main'
    #   - 'release-v[0-9].[0-9]+'

permissions: read-all

jobs:

  # Generate ldflags dynamically.
  # Optional: only needed for ldflags.
  args:
    runs-on: ubuntu-22.04
    outputs:
      commit-date: ${{ steps.ldflags.outputs.commit-date }}
      commit: ${{ steps.ldflags.outputs.commit }}
      version: ${{ steps.ldflags.outputs.version }}
      tree-state: ${{ steps.ldflags.outputs.tree-state }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - id: ldflags
        run: |
          echo "commit-date=$(git log -1 --date=format-local:"'%Y-%m-%d_%H:%M:%S_%Z'" --pretty=format:"%cd")" >> "$GITHUB_OUTPUT"
          echo "commit=$GITHUB_SHA" >> "$GITHUB_OUTPUT"
          echo "version=$(git describe --tags --always --dirty | cut -c2-)" >> "$GITHUB_OUTPUT"
          echo "build=$(echo $(od -vAn --w=8 -tx -N8 </dev/random) | tr -d " ")" >> "$GITHUB_OUTPUT"
          echo "timestamp=$(echo $(TZ=UTC date +"'%Y-%m-%d_%H:%M:%S_%Z'"))" >> "$GITHUB_OUTPUT"

  # Trusted builder.
  build:
    permissions:
      id-token: write # To sign the provenance.
      contents: write # To upload assets to release.
      actions: read   # To read the workflow path.
    needs: args
    uses: slsa-framework/slsa-github-generator/.github/workflows/builder_go_slsa3.yml@v1.6.0
    strategy:
      matrix:
        os:
          - linux
          - windows
        arch:
          - amd64
          - arm64
    with:
      # Check go version to use.
      # https://github.com/actions/go-versions/blob/main/versions-manifest.json
      go-version: 1.20.4
      config-file: .slsa-goreleaser/${{matrix.os}}-${{matrix.arch}}.yml
      # Optional: only needed if using ldflags.
      evaluated-envs: "COMMIT_DATE:${{needs.args.outputs.commit-date}}, COMMIT:${{needs.args.outputs.commit}}, VERSION:${{needs.args.outputs.version}}, BUILD:${{needs.args.outputs.build}}, TIMESTAMP:${{needs.args.outputs.timestamp}}"
